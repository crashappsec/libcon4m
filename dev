#!/bin/bash

export LIBRARY_PATH=${HOME}/.local/c0/libs/

function color {
    case $1 in
        black)   CODE=0 ;;
        red)     CODE=1 ;; RED)     CODE=9 ;;
        green)   CODE=2 ;; GREEN)   CODE=10 ;;
        yellow)  CODE=3 ;; YELLOW)  CODE=11 ;;
        blue)    CODE=4 ;; BLUE)    CODE=12 ;;
        magenta) CODE=5 ;; MAGENTA) CODE=13 ;;
        cyan)    CODE=6 ;; CYAN)    CODE=14 ;;
        white)   CODE=7 ;; WHITE)   CODE=15 ;;
        grey)    CODE=8 ;; *)       CODE=$1 ;;
    esac
    shift

    echo -n $(tput setaf ${CODE})$@$(tput op)
}

OS=$(uname -o 2>/dev/null)
ARCH=$(uname -m 2>/dev/null)
PWD=$(pwd)

if [[ $? -ne 0 ]] ; then
    # Older macOS/OSX versions of uname don't support -o
    OS=$(uname -s)
fi

function log {
    echo $(color blue "[-- libcon4m --]" $@)
}

function meson_build {

    echo ${1} > .meson_last
    rm deps/local 2>/dev/null
    ln -s ${PWD}/deps/${OS}-${ARCH} ${PWD}/deps/local


    if [[ ! -d ${1} ]]; then
        if [[ -f ${1} ]]; then
            rm -rf ${1}
        fi
        log Creating meson target ${1}
        log meson setup ${@}
        meson setup ${@}
    fi
    cd ${1}

    log Compiling meson target ${1}

    if [[ ${OS} = "Darwin" ]] ; then
        meson compile
    else
        CC=musl-gcc meson compile
    fi

    CODE=$?
    if [[ $CODE -eq 0 ]] ; then
        log "Done!"
    else
        log "Build FAILED"
    fi

    cd ..
    if [[ ${1} != "debug" ]]; then
        exit $CODE
    fi

    if [[ $CODE -ne 0 ]]; then
        exit $CODE
    fi
}

function meson_hatrack {

    if [[ ! -d ${1} ]]; then
        if [[ -f ${1} ]]; then
            rm -rf ${1}
        fi
        log Creating meson target ${1}
        meson setup ${1}
    fi
    cd ${1}

    log Compiling meson target ${1}

    if [[ ${OS} = "Darwin" ]] ; then
        meson compile hash
    else
        CC=musl-gcc meson compile hash
    fi

    CODE=$?
    if [[ $CODE -eq 0 ]] ; then
        log "Done!"
    else
        log "Build FAILED"
    fi

    cd ..
    if [[ ${1} != "debug" ]]; then
        exit $CODE
    fi

    if [[ $CODE -ne 0 ]]; then
        exit $CODE
    fi
}

function libcon4m_dev_usage {
    echo "Usage: ./dev [build | run | release | debug | clean]"
    exit 1
}

function debug_it {
    meson_build debug --buildtype=debug
    DEBUGGER=$(which gdb)
    DEBUGGER=${DEBUGGER:-$(which lldb)}
    cd debug
    log "Running debugger:v${DEBUGGER}"
    echo
    echo $(color RED 'Recommended environment variables:')
    echo $(color CYAN 'export ASAN_OPTIONS=halt_on_error=0')
    echo $(color CYAN 'export UBSAN_OPTIONS=print_stacktrace=1;halt_on_error=0')
    ${DEBUGGER} ./c4test
    cd ..

}

function libcon4m_run_tests {
    shift

    TARGET=$(cat .meson_last)

    log Running test binary for target: $(color green '[==' $TARGET '==]')

    cd $TARGET
    ./c4test $@
    EXIT=$?
    log "Exit status: ${EXIT}"
    if [[ ${EXIT} -gt 0 ]] && [[ ${EXIT} -lt 128 ]] && [[ $@ == "" ]]  ; then
        log "Test runner crashed; rerunning tests individually to isolate."
        HERE=`pwd`
        cd ../tests
        for ITEM in `ls basic[0-9]*`; do
            log Running test: $(color green '[==' $ITEM '==]')
            ${HERE}/c4test $ITEM
            if [[ $? -ne 0 ]] ; then
                echo
                echo $(color CYAN '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
                echo $(color CYAN '!! Test case ' $ITEM ' failed !!')
                echo $(color CYAN '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
                echo
            fi
        done
        exit 127
    fi
    cd ..
}

function libcon4m_dev_clean {
    for item in build debug release; do
        if [[ -d ${item} ]]; then
            log Cleaning ${item}
            cd ${item}
            meson compile --clean
            cd ..
        fi
    done
    log "Done!"
}


if [[ ${#} -eq 0 ]]; then
    meson_build build
fi

case $1 in
    clean)   libcon4m_dev_clean
             ;;
    build)   meson_build build --buildtype=plain
             ;;
    debug)   meson_build debug --buildtype=debug
             debug_it
             ;;
    release) meson_build release --buildtype=release
             ;;
    run)
             set -e
             libcon4m_run_tests $@
             CODE=$?
             if [[ $CODE -eq 0 ]] ; then
                 log "CI/CD tests passed."
             else
                 log "CI/CD Tests FAILED."
                 exit $CODE
             fi

             ;;
    hash)    meson_hatrack hash
             ;;
    *)
        libcon4m_dev_usage
        ;;
esac
